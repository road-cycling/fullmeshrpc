// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SBClient is the client API for SB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SBClient interface {
	BC(ctx context.Context, opts ...grpc.CallOption) (SB_BCClient, error)
	LatencyChan(ctx context.Context, opts ...grpc.CallOption) (SB_LatencyChanClient, error)
}

type sBClient struct {
	cc grpc.ClientConnInterface
}

func NewSBClient(cc grpc.ClientConnInterface) SBClient {
	return &sBClient{cc}
}

func (c *sBClient) BC(ctx context.Context, opts ...grpc.CallOption) (SB_BCClient, error) {
	stream, err := c.cc.NewStream(ctx, &SB_ServiceDesc.Streams[0], "/SB/BC", opts...)
	if err != nil {
		return nil, err
	}
	x := &sBBCClient{stream}
	return x, nil
}

type SB_BCClient interface {
	Send(*SI) error
	Recv() (*Acker, error)
	grpc.ClientStream
}

type sBBCClient struct {
	grpc.ClientStream
}

func (x *sBBCClient) Send(m *SI) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sBBCClient) Recv() (*Acker, error) {
	m := new(Acker)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sBClient) LatencyChan(ctx context.Context, opts ...grpc.CallOption) (SB_LatencyChanClient, error) {
	stream, err := c.cc.NewStream(ctx, &SB_ServiceDesc.Streams[1], "/SB/LatencyChan", opts...)
	if err != nil {
		return nil, err
	}
	x := &sBLatencyChanClient{stream}
	return x, nil
}

type SB_LatencyChanClient interface {
	Send(*Timestamp) error
	Recv() (*Timestamp, error)
	grpc.ClientStream
}

type sBLatencyChanClient struct {
	grpc.ClientStream
}

func (x *sBLatencyChanClient) Send(m *Timestamp) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sBLatencyChanClient) Recv() (*Timestamp, error) {
	m := new(Timestamp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SBServer is the server API for SB service.
// All implementations must embed UnimplementedSBServer
// for forward compatibility
type SBServer interface {
	BC(SB_BCServer) error
	LatencyChan(SB_LatencyChanServer) error
	mustEmbedUnimplementedSBServer()
}

// UnimplementedSBServer must be embedded to have forward compatible implementations.
type UnimplementedSBServer struct {
}

func (UnimplementedSBServer) BC(SB_BCServer) error {
	return status.Errorf(codes.Unimplemented, "method BC not implemented")
}
func (UnimplementedSBServer) LatencyChan(SB_LatencyChanServer) error {
	return status.Errorf(codes.Unimplemented, "method LatencyChan not implemented")
}
func (UnimplementedSBServer) mustEmbedUnimplementedSBServer() {}

// UnsafeSBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SBServer will
// result in compilation errors.
type UnsafeSBServer interface {
	mustEmbedUnimplementedSBServer()
}

func RegisterSBServer(s grpc.ServiceRegistrar, srv SBServer) {
	s.RegisterService(&SB_ServiceDesc, srv)
}

func _SB_BC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SBServer).BC(&sBBCServer{stream})
}

type SB_BCServer interface {
	Send(*Acker) error
	Recv() (*SI, error)
	grpc.ServerStream
}

type sBBCServer struct {
	grpc.ServerStream
}

func (x *sBBCServer) Send(m *Acker) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sBBCServer) Recv() (*SI, error) {
	m := new(SI)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SB_LatencyChan_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SBServer).LatencyChan(&sBLatencyChanServer{stream})
}

type SB_LatencyChanServer interface {
	Send(*Timestamp) error
	Recv() (*Timestamp, error)
	grpc.ServerStream
}

type sBLatencyChanServer struct {
	grpc.ServerStream
}

func (x *sBLatencyChanServer) Send(m *Timestamp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sBLatencyChanServer) Recv() (*Timestamp, error) {
	m := new(Timestamp)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SB_ServiceDesc is the grpc.ServiceDesc for SB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SB",
	HandlerType: (*SBServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BC",
			Handler:       _SB_BC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "LatencyChan",
			Handler:       _SB_LatencyChan_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/service.proto",
}
